// Code generated by mockery v2.36.1. DO NOT EDIT.

package dao

import (
	models "ShortUrlApp/models"

	mock "github.com/stretchr/testify/mock"
)

// MockUrlStatsDao is an autogenerated mock type for the UrlStatsDao type
type MockUrlStatsDao struct {
	mock.Mock
}

// Create provides a mock function with given fields: event
func (_m *MockUrlStatsDao) Save(event *models.UrlStatsEvent) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UrlStatsEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCount provides a mock function with given fields: shortUrl
func (_m *MockUrlStatsDao) GetCount(shortUrl string) (int, int, int, error) {
	ret := _m.Called(shortUrl)

	var r0 int
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(string) (int, int, int, error)); ok {
		return rf(shortUrl)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(shortUrl)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(shortUrl)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string) int); ok {
		r2 = rf(shortUrl)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(shortUrl)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewMockUrlStatsDao creates a new instance of MockUrlStatsDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUrlStatsDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUrlStatsDao {
	mock := &MockUrlStatsDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
